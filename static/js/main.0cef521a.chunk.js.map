{"version":3,"sources":["components/Paginator/Paginator.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Users/users.module.css","assets/images/user.png","assets/images/Hourglass.gif","components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","serviceWorker.tsx","redux/dialogs-reduser.tsx","redux/friends-reduser.tsx","api/api.ts","redux/profile-reduser.tsx","utils/object-helpers.js","redux/users-reduser.tsx","redux/auth-reduser.tsx","redux/app-reduser.tsx","redux/redux-store.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Paginator/PaginatorX.tsx","components/Users/User.tsx","components/Users/Users.tsx","components/common/preloader/Preloader.tsx","redux/UserSelectors.ts","components/Users/UsersContainer.tsx","components/Profile/MyPosts/ProfileInfo/ProfileStatusFunction.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Login/Login.tsx","redux/auth-Selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/common/FormsControls/FormsControls.module.css"],"names":["module","exports","userPhoto","selectedPage","pageNumber","wrap","postsBlock","posts","__webpack_require__","p","item","img","descriptionBlock","Boolean","window","location","hostname","match","initialState","dialogs","id","name","messages","message","dialogsReducer","state","arguments","length","undefined","action","type","newMessage","newMessageText","Object","objectSpread2","concat","toConsumableArray","friendsReducer","instance","axios","create","withCredentials","baseURL","headers","API-KEY","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","profileAPI","getStatus","res","updateStatus","status","put","authAPI","email","password","rememberMe","likesCount","profile","setStatus","profileReducer","newPost","newPostText","updateObjectInArray","items","itemsId","objPropName","newObjProps","map","u","filter","users","totalUsersCount","isFetching","followingInProgress","setFilter","followACSuccess","unfollowACSuccess","setCurrentPageAC","setIsFetchingAC","toggleFollowingProgress","followUnfollowFlow","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","apiMethod","actionCreator","_context2","prev","next","sent","resultCode","stop","_x2","_x3","_x4","_x5","apply","this","usersReducer","followed","count","login","isAuth","captchaUrl","setAuthUserData","payload","getAuthUserData","_ref","_callee","_data$data","_login","_context","_x","authReducer","initialized","appReducer","rootReducer","combineReducers","dialogPage","friendPage","profilePage","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","News","props","react_default","createElement","className","s","Y","Music","Settings","DialogItem","path","dialog","src","alt","react_router_dom","to","Message","Textarea","input","_ref$meta","meta","touched","error","objectWithoutProperties","hasError","styles","form_control","assign","Input","_ref2$meta","required","value","maxLengthCreator","maxLength","DialogsFormRedux","reduxForm","onSubmit","handleSubmit","Field","component","validate","Dialogs","dialogsElement","d","Dialogs_DialogItem_DialogItem","messageElement","m","Dialogs_Message_Message","dialogsItems","values","onSendMessageClick","mapStateToPropsForRedirect","compose","connect","addAnswerActionCreator","Component","RedirectComponent","_React$Component","inherits","_super","createSuper","classCallCheck","createClass","key","react_router","React","Paginator","totalItemsCount","_ref$currentPage","_ref$onPageChanged","onPageChanged","x","_ref$portionSize","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","_useState","useState","_useState2","slicedToArray","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","paginator","onClick","defineProperty","e","User","search","indexOf","photos","small","disabled","some","Users","useDispatch","setSearch","PaginatorX","placeholder","onChange","target","Users_User","Preloader","Hourglass","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","_this","_this$props","Fragment","Preloader_Preloader","components_Users_Users","_ref3","_callee3","_context3","bind","_x6","_ref4","_callee4","_context4","_x7","totalCount","ProfileStatusWithHooks","editMode","setEditMode","_useState3","_useState4","useEffect","onDoubleClick","autoFocus","onBlur","currentTarget","ProfileInfo","large","ProfileStatusFunction","Post","length10","AddMyPostFormRedux","MyPosts","postsElement","MyPosts_Post_Post","addPost","MyPostsContainer","addPostActionCreator","Profile","MyPosts_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","params","authorizedUserId","history","getUsersProFile","components_Profile_Profile","t0","withRouter","LoginReduxForm","style","formSummaryError","stopSubmit","_error","formData","selectAuth","selectCurrentUserLogin","AppHeader","useSelector","Header","Layout","row","col","span","menu","theme","mode","defaultSelectedKeys","Item","avatar","backgroundColor","icon","UserOutlined","es_button","App","InitializeApp","SubMenu","Menu","Content","Footer","Sider","layout","Header_AppHeader","padding","breadcrumb","margin","width","defaultOpenKeys","height","title","LaptopOutlined","NotificationOutlined","minHeight","render","DialogsContainer","Profile_ProfileContainer","components_News_News","components_Music_Music","components_Settings_Settings","Users_UsersContainer","components_Login_Login","textAlign","ReactDOM","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","active","b","inputMar"],"mappings":"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","file":"static/js/main.0cef521a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Paginator_userPhoto__NSUAU\",\"selectedPage\":\"Paginator_selectedPage__3pSzT\",\"pageNumber\":\"Paginator_pageNumber__22ES6\",\"wrap\":\"Paginator_wrap__3IEyF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3ps1Z\",\"posts\":\"MyPosts_posts__gOPR0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__3Dw8o\",\"selectedPage\":\"users_selectedPage__9erwI\"};","module.exports = __webpack_public_path__ + \"static/media/user.8b1dbb1f.png\";","module.exports = __webpack_public_path__ + \"static/media/Hourglass.6921c9f6.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProfileInfo_item__1i3gN\",\"img\":\"ProfileInfo_img__e3JQg\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__uKFLW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3bYdg\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andery\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Victor\"},\r\n        {id: 6, name: \"Valera\"},\r\n        {id: 7, name: \"Kos\"}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is you\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"},\r\n    ] as Array<MessageType>,\r\n\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state = initialState, action: AddMessageActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            let newMessage: MessageType = {\r\n                id: 6,\r\n                message: action.newMessageText\r\n            };\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage]\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AddMessageActionType = {\r\n    type: 'ADD-MESSAGE'\r\n    newMessageText: string\r\n}\r\nexport const addAnswerActionCreator = (newMessageText: string): AddMessageActionType =>\r\n    ({type: ADD_MESSAGE, newMessageText} as const)\r\n\r\nexport default dialogsReducer","type FriendsDialogsType =\r\n    {\r\n        id: number,\r\n        name: string\r\n    }\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andery\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Victor\"},\r\n        {id: 6, name: \"Valera\"},\r\n        {id: 7, name: \"Kos\"}\r\n    ] as Array<FriendsDialogsType>\r\n}\r\ntype initialStateType = typeof initialState\r\nconst friendsReducer = (state = initialState, action): initialStateType => {\r\n    return {...state}\r\n}\r\nexport default friendsReducer;","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"4e5aee81-42dd-43de-87fa-a601a9c1e88b\"\r\n\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    /*getAuth() {\r\n        return instance.get(`auth/me`)\r\n            .then(data => data.data);\r\n    },*/\r\n    getProfile(userId: number) {\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n            .then(data => data.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId)\r\n            .then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status})\r\n            .then(res => res.data);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n            .then(data => data.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\n","import {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\n\r\nexport type AddPostActionType = {\r\n    type: 'ADD-POST',\r\n    newPostText: string\r\n}\r\nexport type UpDateNewPostActionType = {\r\n    type: 'UPDATE-NEW-POST-TEXT'\r\n    newText: string\r\n}\r\nexport type AddMessageActionType = {\r\n    type: 'ADD-MESSAGE'\r\n    newMessageText: string\r\n}\r\nexport type UpDateMessageActionType = {\r\n    type: 'UPDATE-MESSAGE-TEXT'\r\n    newTextMessage: string\r\n}\r\nexport type ActionsTypes = AddPostActionType | UpDateNewPostActionType | AddMessageActionType | UpDateMessageActionType\r\nexport type TYPESALLACTION = ActionsTypes | SetUserProfileActionType | setStatusType\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n}\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi how are you?\", likesCount: 5},\r\n        {id: 2, message: \"It is my First post!\", likesCount: 23},\r\n        {id: 3, message: \"BlaBla\", likesCount: 65},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n\r\n};\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: TYPESALLACTION): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case SET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionType => ({type: ADD_POST, newPostText})\r\n\r\ntype SetUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => ({type: SET_USER_PROFILE, profile})\r\nexport type setStatusType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\nexport const setStatus = (status: string): setStatusType =>\r\n    ({type: SET_STATUS, status: status})\r\n\r\nexport const getUsersProFile = (userId: number) => async (dispatch: any) => {\r\n    const response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response));\r\n}\r\nexport const getStatus = (userId: number) => async (dispatch: any) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response));\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n    try {\r\n        let response = await profileAPI.updateStatus(status);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n    } catch (error) {\r\n        //\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","export const updateObjectInArray = (items, itemsId, objPropName, newObjProps) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemsId) {\r\n            return {...u, ...newObjProps};\r\n        }\r\n        return u;\r\n    });\r\n}","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nconst FOLLOW = 'FOLLOW-POST';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_FILTER = 'SET_FILTER';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nexport type UserType = {\r\n    id: number,\r\n    name: string,\r\n    status: string,\r\n    photos: { small: string, large: string },\r\n    followed: boolean\r\n}\r\n\r\nlet initialState = {\r\n    filter: '',\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n\r\n}\r\n\r\nexport type InitialState = typeof initialState\r\n\r\nconst usersReducer = (state: InitialState = initialState, action: ActionType): InitialState => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n                /*state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true};\r\n                    }\r\n                    return u;\r\n                })*/\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n                /*state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false};\r\n                    }\r\n                    return u;\r\n                })*/\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_FILTER: {\r\n            return {...state, filter: action.filter}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n\r\n            return {\r\n                ...state,\r\n                //@ts-ignore\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType =\r\n    followACSuccessType\r\n    | unfollowACSuccessType\r\n    | setUsersACType\r\n    | setCurrentPageACType\r\n    | setUsersTotalCountACType\r\n    | setIsFetchingACType\r\n    | toggleFollowingProgressType\r\n    | setFilterType\r\n\r\nexport const setFilter = (filter: string) => ({type: SET_FILTER, filter} as const)\r\ntype setFilterType = ReturnType<typeof setFilter>\r\n\r\nexport const followACSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\r\ntype followACSuccessType = ReturnType<typeof followACSuccess>\r\n\r\nexport const unfollowACSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\ntype unfollowACSuccessType = ReturnType<typeof unfollowACSuccess>\r\n\r\nexport const setUsersAC = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\ntype setUsersACType = ReturnType<typeof setUsersAC>\r\n\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\ntype setCurrentPageACType = ReturnType<typeof setCurrentPageAC>\r\n\r\nexport const setUsersTotalCountAC = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n} as const)\r\ntype setUsersTotalCountACType = ReturnType<typeof setUsersTotalCountAC>\r\n\r\nexport const setIsFetchingAC = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\ntype setIsFetchingACType = ReturnType<typeof setIsFetchingAC>\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n} as const)\r\ntype toggleFollowingProgressType = ReturnType<typeof toggleFollowingProgress>\r\n//-----------------------------------------------------------\r\n/*\r\ntype DispatchType = Dispatch<ActionType>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionType>\r\n*/\r\n//_________________________________________________________________\r\n\r\n\r\n//_________________________________________________________________\r\nexport const getUsersThunkCreator = (currentPage, pageSize) => async (dispatch) => {\r\n    dispatch(setIsFetchingAC(true));\r\n    dispatch(setCurrentPageAC(currentPage))\r\n    let data = await usersAPI.getUsers(currentPage, pageSize)\r\n    dispatch(setIsFetchingAC(false));\r\n    dispatch(setUsersAC(data.items));\r\n    dispatch(setUsersTotalCountAC(data.totalCount));\r\n    dispatch(setCurrentPageAC(currentPage))\r\n}\r\n\r\n\r\nconst followUnfollowFlow = async(dispatch,userId,apiMethod,actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number) => async (dispatch: Dispatch) => {\r\n    let apiMethod = usersAPI.follow.bind(usersAPI);\r\n    let actionCreator = followACSuccess;\r\n    followUnfollowFlow(dispatch,userId,apiMethod,actionCreator)\r\n}\r\nexport const unfollow = (userId) => async (dispatch: Dispatch) => {\r\n    let apiMethod = usersAPI.unfollow.bind(usersAPI);\r\n    let actionCreator = unfollowACSuccess;\r\n    followUnfollowFlow(dispatch,userId,apiMethod,actionCreator)\r\n}\r\n\r\n\r\nexport default usersReducer;","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from 'redux-form';\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    id: null as string | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst authReducer = (state = initialState, action: setAuthUserDataType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\nexport type setAuthUserDataType = ReturnType<typeof setAuthUserData>\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    payload: {id, login, email, isAuth}\r\n} as const)\r\nexport type getAuthUserData = ReturnType<typeof getAuthUserData>\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let data = await authAPI.me()\r\n    if (data.resultCode === 0) {\r\n        let {id, login, email} = data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\nexport const logout = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport default authReducer;","import {getAuthUserData} from \"./auth-reduser\";\r\n\r\nconst SET_INITIALIZED_SUCCESS = 'SET_INITIALIZED_SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state = initialState, action: initializedType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\nexport type initializedType = ReturnType<typeof InitializedSuccess>\r\n\r\nexport const InitializedSuccess = () => ({\r\n    type: SET_INITIALIZED_SUCCESS\r\n} as const)\r\n\r\nexport const InitializeApp = () => async (dispatch: any) => {\r\n    let promise = await dispatch(getAuthUserData())\r\n    dispatch(InitializedSuccess())\r\n}\r\n\r\nexport default appReducer;","import {createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport dialogsReducer from \"./dialogs-reduser\";\r\nimport friendsReducer from \"./friends-reduser\";\r\nimport profileReducer from \"./profile-reduser\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport authReducer from \"./auth-reduser\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reduser\";\r\n\r\nlet rootReducer = combineReducers({\r\n    dialogPage: dialogsReducer,\r\n    friendPage: friendsReducer,\r\n    profilePage: profileReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app:appReducer\r\n})\r\n\r\nexport type ActionsTypes = {\r\n\r\n}\r\ntype PropertiesType<T> = T extends {[key:string]:infer U} ? U : never\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n//@ts-ignore\r\nwindow.store = store;\r\nexport default store;","import React from \"react\";\r\nimport s from './News.module.css'\r\nconst News = (props) => {\r\n    return(\r\n        <div className={s.Y}>\r\n            News\r\n        </div>\r\n    )\r\n}\r\nexport default News;","import React from \"react\";\r\nimport s from './Music.module.css'\r\nconst Music = (props) => {\r\n    return(\r\n        <div className={s.Y}>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music;","import React from \"react\";\r\nimport s from './Settings.module.css'\r\nconst Settings = (props) => {\r\n    return(\r\n        <div className={s.Y}>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype DialogItemType = {\r\n    id:Number\r\n    name:string\r\n}\r\nconst DialogItem:React.FC<DialogItemType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src='https://main-cdn.goods.ru/hlr-system/1722315217/600001112185b0.jpeg' alt=\"\"/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsMessageType = {\r\n    message:string\r\n}\r\nconst Message:React.FC<PropsMessageType> = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\nexport default Message;\r\n","import React from \"react\";\r\nimport styles from './FormsControls.module.css'\r\n\r\nexport const Textarea = ({input, meta:{touched,error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (<div className={styles.form_control + ' ' + (hasError ? styles.error : \"\")}>\r\n        <div><textarea {...input} {...props}/></div>\r\n        {hasError && <span>{error}</span>}\r\n    </div>)\r\n}\r\n\r\nexport const Input = ({input, meta:{touched,error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (<div className={styles.form_control + ' ' + (hasError ? styles.error : \"\")}>\r\n        <div><input {...input} {...props}/></div>\r\n        {hasError && <span>{error}</span>}\r\n    </div>)\r\n}\r\n","import React from 'react'\r\n\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\nexport const maxLengthCreator = (maxLength) => value => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {DialogType, MessageType} from \"../../redux/dialogs-reduser\";\r\n\r\ntype DialogProps = {\r\n    onSendMessageClick: (newMessageText: string) => void\r\n    dialogPage: {\r\n        dialogs: Array<DialogType>\r\n        messages: Array<MessageType>\r\n    }\r\n}\r\n\r\n\r\nconst Dialogs: React.FC<DialogProps> = (props) => {\r\n    let state = props.dialogPage\r\n\r\n    let dialogsElement = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\r\n\r\n    let messageElement = state.messages.map(m => <Message message={m.message}/>);\r\n\r\n    let onSendMessageClick = (values) => {\r\n        props.onSendMessageClick(values.newMessageText);\r\n\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElement}\r\n            </div>\r\n            <DialogsFormRedux onSubmit={onSendMessageClick}/>\r\n        </div>\r\n    )\r\n}\r\nconst length = maxLengthCreator(12)\r\nconst DialogsForm = (props) => {\r\n    return (<form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                name=\"newMessageText\"\r\n                component={Textarea}\r\n                validate={[required, length]}/>\r\n            <button>add message</button>\r\n        </form>\r\n    )\r\n}\r\nconst DialogsFormRedux = reduxForm({form: \"DialogMessageTextForm\"})(DialogsForm);\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","\r\nimport {addAnswerActionCreator, DialogType} from \"../../redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch,} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n        newMessageText: state.dialogPage.newMessageText\r\n    }\r\n}\r\n//export type mapStateToProps = typeof mapStateToProps\r\nexport type mapDispatchToProps = ReturnType<typeof mapDispatchToProps>\r\n\r\nlet mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {\r\n        onSendMessageClick: (newMessageText:string) => {\r\n            dispatch(addAnswerActionCreator(newMessageText))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","import React, {useState} from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize,\r\n                                          currentPage = 1,\r\n                                          onPageChanged = x => x,\r\n                                          portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={cn(styles.paginator)}>\r\n        { portionNumber > 1 &&\r\n            <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React, {useState} from 'react'\r\nimport styles from \"./users.module.css\"\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {UserType} from \"../../redux/users-reduser\";\r\n\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    unfollow: (id: number) => void\r\n    followingInProgress: Array<number>\r\n    follow: (id: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = (props) => {\r\n    const [search, setSearch] = useState('')\r\n\r\n    return <div>\r\n        {\r\n            props.users\r\n                .filter(u => u.name.indexOf(search) > -1)\r\n                .map(u => <div key={u.id}>\r\n                <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + u.id}>\r\n                <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}\r\n                     alt=\"\"/>\r\n                     </NavLink>\r\n            </div>\r\n            <div>\r\n        {u.followed\r\n            ? <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                props.unfollow(u.id)\r\n            }}>Unfollow</button>\r\n            : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                props.follow(u.id)\r\n            }}>Follow</button>}\r\n            </div>\r\n            </span><span>\r\n            <span>\r\n            <div>{u.name}</div>\r\n            <div>{u.status}</div>\r\n            </span>\r\n            <span>\r\n            <div>{\"u.location.country\"}</div>\r\n            <div>{\"u.location.city\"}</div>\r\n            </span>\r\n            </span>\r\n                </div>)\r\n        }\r\n    </div>\r\n}\r\nexport default User;","import React, {useState} from 'react'\r\nimport {setFilter, UserType} from \"../../redux/users-reduser\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport PaginatorX from \"../Paginator/PaginatorX\";\r\nimport User from \"./User\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (p: number) => void\r\n    users: Array<UserType>\r\n    unfollow: (id: number) => void\r\n    followingInProgress: Array<number>\r\n    follow: (id: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n}\r\n\r\nlet Users: React.FC<PropsType> = (props) => {\r\n    let {totalUsersCount, pageSize, currentPage, onPageChanged} = props\r\n    let dispatch = useDispatch()\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    let pages: number[] = [];\r\n    for (let i: number = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    const [search, setSearch] = useState('')\r\n\r\n    const onSearchChange = (e) => {\r\n        setSearch(e.target.value)\r\n        dispatch(setFilter(search))\r\n    }\r\n\r\n\r\n    return <div>\r\n        <PaginatorX\r\n            totalItemsCount={totalUsersCount}\r\n            pageSize={pageSize}\r\n            currentPage={currentPage}\r\n            onPageChanged={onPageChanged}\r\n        />\r\n        <input placeholder={\"search\"} value={search} onChange={onSearchChange}/>\r\n        <div><strong>Total Users Count: {totalUsersCount}</strong></div>\r\n\r\n        <User {...props}/>\r\n    </div>\r\n}\r\nexport default Users;","import React from 'react'\r\nimport Hourglass from \"../../../assets/images/Hourglass.gif\";\r\n\r\nexport let Preloader = (props) => {\r\n    return <div>\r\n        <img src={Hourglass} alt=\"\"/>\r\n    </div>\r\n}","import {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n        return users.filter(u => true)\r\n    }\r\n)\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress\r\n}","import {connect} from \"react-redux\";\r\nimport {\r\n    getUsersThunkCreator,\r\n    follow, unfollow, toggleFollowingProgress, setFilter\r\n} from \"../../redux/users-reduser\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getPageSize,\r\n    getUsers,\r\n    getTotalUsersCount,\r\n    getCurrentPage,\r\n    getIsFetching,\r\n    getFollowingInProgress\r\n} from \"../../redux/UserSelectors\";\r\n\r\ntype UserType = {\r\n    id: number,\r\n    name: string,\r\n    status: string,\r\n    photos: { small: string, large: string },\r\n    followed: boolean,\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\ntype PropsType = {\r\n    setFilter: (filter: string) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowingProgress: (isFetching: boolean) => void\r\n    users: Array<UserType>\r\n    setCurrentPage: (p: number) => void\r\n    setTotalUsersCount: (totalUsersCount: number) => void\r\n    setUsers: (res: string) => void\r\n    unfollow: (id: number) => void\r\n    follow: (id: number) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: []\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n\r\n\r\n}\r\n/*export type UsersPropsType = UserType & PropsType*/\r\n\r\n// @ts-ignore\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    state = {\r\n        search: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {currentPage,pageSize} = this.props\r\n        this.props.getUsers(currentPage,pageSize);\r\n\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(pageNumber,pageSize)\r\n\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ?\r\n                <Preloader/> : null}\r\n            <Users\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                unfollow={this.props.unfollow}\r\n                follow={this.props.follow}\r\n                currentPage={this.props.currentPage}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                followingInProgress={this.props.followingInProgress}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        filter: state.usersPage.filter,\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        setFilter,\r\n        follow,\r\n        unfollow,\r\n        toggleFollowingProgress: toggleFollowingProgress,\r\n        getUsers: getUsersThunkCreator\r\n        // @ts-ignore\r\n    }))(UsersContainer);\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\ntype StateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}> {props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    onChange={onStatusChange}\r\n                    value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n//TODO Form for status\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../../common/preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusFunction\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <div>\r\n                <img src={profile.photos.large} alt=''/>\r\n\r\n                <ProfileStatusWithHooks status={status}\r\n                                        updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://main-cdn.goods.ru/hlr-system/1722315217/600001112185b0.jpeg' alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like </span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Post;","import React, {RefObject} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm, InjectedFormProps} from 'redux-form'\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElement = props.posts.map(p => <Post likesCount={p.likesCount} message={p.message}/>);\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div>\r\n                <h3>My posts</h3>\r\n            </div>\r\n\r\n            <AddMyPostFormRedux onSubmit={onAddPost}/>\r\n\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nconst length10 = maxLengthCreator(10)\r\nconst AddMyPostForm = (props) => {\r\n    return (<form onSubmit={props.handleSubmit}>\r\n        <Field name=\"newPostText\" component={Textarea} validate={[required,length10]} placeholder={\"Post Message\"}/>\r\n        {/*<textarea\r\n            value={props.newPostText}\r\n            onChange={onPostChange}\r\n            ref={newPostElement}\r\n        />*/}\r\n        <div>{/**/}\r\n            <button>Add Post</button>\r\n            {/*<button onClick={onAddPost}>Add Post</button>*/}\r\n        </div>\r\n    </form>)\r\n}\r\n\r\nconst AddMyPostFormRedux = reduxForm({form: 'ProfileAddNewPostForm'})(AddMyPostForm)\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostActionCreator } from \"../../../redux/profile-reduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps,)(MyPosts);\r\nexport type PostType = typeof MyPostsContainer;\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={ props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUsersProFile, updateStatus} from \"../../redux/profile-reduser\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {compose} from \"redux\";\r\n\r\ntype pathParamsType = {\r\n    userId: string\r\n}\r\ntype mapStateToPropsType = {\r\n    profile: any\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId:string\r\n\r\n}\r\ntype mapDispatchPropsType = {\r\n    getUsersProFile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype OwnPropsType = mapStateToPropsType & mapDispatchPropsType\r\n\r\ntype PropsType = RouteComponentProps<pathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUsersProFile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport type ProfileType = {\r\n    profile: {\r\n        aboutMe: string\r\n        contacts: {\r\n            facebook: string\r\n            website: null | string\r\n            vk: string\r\n            twitter: string\r\n            instagram: string\r\n            youtube: null | string\r\n            github: string\r\n            mainLink: null | string\r\n        },\r\n        lookingForAJob: boolean\r\n        lookingForAJobDescription: string\r\n        fullName: string\r\n        userId: number\r\n        photos: {\r\n            small: string\r\n            large: string\r\n        }\r\n    },\r\n    status: string,\r\n    authorizedUserId:string,\r\n    isAuth:boolean\r\n\r\n}\r\n\r\nlet mapStateToProps = (state): ProfileType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId:state.auth.id,\r\n    isAuth:state.auth.isAuth,\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUsersProFile, getStatus, updateStatus}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer)\r\n","import React from \"react\";\r\nimport {Field, reduxForm, InjectedFormProps} from 'redux-form'\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reduser\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from './../common/FormsControls/FormsControls.module.css'\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype PropsType = mapStateToPropsType &mapDispatchToPropsType\r\n\r\nconst Login:React.FC<PropsType> = (props) => {\r\n    let onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.login, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\ntype FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nconst length = maxLengthCreator(20)\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    const {handleSubmit,error} = props;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field name=\"login\" component={Input} validate={[required, length]} placeholder={\"Login\"}/></div>\r\n            <div><Field name=\"password\" component={Input} validate={[required, length]} type={\"password\"}\r\n                        placeholder={\"Password\"}/></div>\r\n            <div><Field name=\"rememberMe\" component={Input} type={\"checkbox\"}/>remember me</div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <button>Login</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n})(LoginForm)\r\ntype mapStateToPropsType = {\r\n    isAuth:boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    login:(email:string,\r\n    password:string,\r\n    rememberMe:boolean)=>void\r\n}\r\nconst mapStateToProps = (state:AppStateType):mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const selectAuth = (state:AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const selectCurrentUserLogin = (state:AppStateType) => {\r\n    return state.auth.login\r\n}\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {selectAuth, selectCurrentUserLogin} from \"../../redux/auth-Selectors\";\r\nimport {logout} from \"../../redux/auth-reduser\";\r\n\r\nexport type MapPropsType = {}\r\n\r\n\r\nexport const AppHeader: React.FC<MapPropsType> = (props) => {\r\n    const isAuth = useSelector<AppStateType>(selectAuth)\r\n    const login = useSelector<AppStateType>(selectCurrentUserLogin)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const {Header} = Layout;\r\n    return (<Header className=\"header\">\r\n        <div className=\"logo\"/>\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"1\"><Link to=\"/developers\">Developers</Link></Menu.Item>\r\n                </Menu></Col>\r\n            {isAuth\r\n                ? <><Col span={1}>\r\n                    <Avatar alt={login && ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                </Col>\r\n                    <Col span={5}>\r\n                        <Button onClick={logoutCallback}>Log Out</Button>\r\n                    </Col>\r\n                </>\r\n                : <Col span={6}>\r\n                    <Button>\r\n                        <Link to={'/login'}>Login</Link>\r\n                    </Button>\r\n                </Col>}\r\n\r\n        </Row>\r\n    </Header>)\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Link, Route} from 'react-router-dom'\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport {InitializeApp, InitialStateType} from \"./redux/app-reduser\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport 'antd/dist/antd.css'\r\n\r\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {Breadcrumb, Layout, Menu} from \"antd\";\r\nimport {AppHeader} from \"./components/Header/Header\";\r\n\r\nclass App extends React.Component<any, any> {\r\n    componentDidMount() {\r\n        this.props.InitializeApp()\r\n    }\r\n\r\n    render() {\r\n        /*if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }*/\r\n        const {SubMenu} = Menu;\r\n        const {Header, Content, Footer, Sider} = Layout;\r\n        return (\r\n            <Layout>\r\n                <AppHeader />\r\n                <Content style={{padding: '0 50px'}}>\r\n                    <Breadcrumb style={{margin: '16px 0'}}>\r\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                defaultSelectedKeys={['1']}\r\n                                defaultOpenKeys={['sub1']}\r\n                                style={{height: '100%'}}\r\n                            >\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\r\n                                    <Menu.Item key=\"1\"><Link to=\"/profile\">Profile</Link> </Menu.Item>\r\n                                    <Menu.Item key=\"2\"> <Link to=\"/dialogs\">Messages</Link></Menu.Item>\r\n                                    <Menu.Item key=\"3\">option3</Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Developers\">\r\n                                    <Menu.Item key=\"5\"><Link to=\"/developers\">Users</Link></Menu.Item>\r\n                                    <Menu.Item key=\"6\">option6</Menu.Item>\r\n                                    <Menu.Item key=\"7\">option7</Menu.Item>\r\n                                    <Menu.Item key=\"8\">option8</Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"subnav 3\">\r\n                                    <Menu.Item key=\"9\">option9</Menu.Item>\r\n                                    <Menu.Item key=\"10\">option10</Menu.Item>\r\n                                    <Menu.Item key=\"11\">option11</Menu.Item>\r\n                                    <Menu.Item key=\"12\">option12</Menu.Item>\r\n                                </SubMenu>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\r\n                            <Route path=\"/dialogs/\" render={() => <DialogsContainer/>}/>\r\n                            <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                            <Route path=\"/news/\" render={() => <News/>}/>\r\n                            <Route path=\"/music/\" render={() => <Music/>}/>\r\n                            <Route path=\"/settings/\" render={() => <Settings/>}/>\r\n                            <Route path=\"/developers/\" render={() => <UsersContainer/>}/>\r\n                            <Route path=\"/login/\" render={() => <LoginPage/>}/>\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center'}}>©2021 Created by Petrov Konstantin</Footer>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: InitialStateType) => ({\r\n    initialized: state.initialized\r\n})\r\n\r\nexport default compose(connect(mapStateToProps, {InitializeApp}))(App);\r\n\r\n\r\n/*(\r\n\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route path=\"/dialogs/\" render={() => <DialogsContainer/>}/>\r\n                    <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                    <Route path=\"/news/\" render={() => <News/>}/>\r\n                    <Route path=\"/music/\" render={() => <Music/>}/>\r\n                    <Route path=\"/settings/\" render={() => <Settings/>}/>\r\n                    <Route path=\"/users/\" render={() => <UsersContainer/>}/>\r\n                    <Route path=\"/login/\" render={() => <LoginPage/>}/>\r\n\r\n                </div>\r\n            </div>\r\n        );*/\r\n","import React from 'react';\r\nimport './index.css';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/redux-store'\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter >\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Mg4R\",\"dialogsItems\":\"Dialogs_dialogsItems__fioMy\",\"active\":\"Dialogs_active__S_NQo\",\"messages\":\"Dialogs_messages__80Gxg\",\"message\":\"Dialogs_message__1aKJo\",\"b\":\"Dialogs_b__1u7OC\",\"inputMar\":\"Dialogs_inputMar__gIYjx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_control\":\"FormsControls_form_control__2aFAo\",\"error\":\"FormsControls_error__2p0-c\",\"formSummaryError\":\"FormsControls_formSummaryError__1XuVR\"};"],"sourceRoot":""}